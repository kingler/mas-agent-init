# Project Intelligence: Multi-Agent Memory System

This file captures important patterns, preferences, and project intelligence that help agents work more effectively. It serves as a learning journal that grows smarter as we work together.

## Naming Conventions

### Files
- Memory Bank core files: lowercase with camelCase (e.g., `projectbrief.md`, `systemPatterns.md`)
- Agent rules files: `agent{N}_rules.md` where N is the agent number
- Workspace files: descriptive names with kebab-case (e.g., `auth-flow-diagram.md`)

### Mermaid Diagrams
- Use descriptive node IDs (e.g., `UserService` instead of `A`)
- Include direction indicators in all graphs (TD, LR, etc.)
- Use consistent color schemes:
  - System components: #f9f9f9
  - External systems: #e1f5fe
  - User interfaces: #e8f5e9
  - Data stores: #fff3e0

## Documentation Patterns

### Memory Bank Updates
- Always update `activeContext.md` when modifying other Memory Bank files
- Cross-reference related files in each update
- Include rationale for significant changes
- Request reviews from relevant agents

### Code-Context Mapping
- Update `codeContext.md` whenever implementation changes
- Maintain bidirectional links between code and documentation
- Use relative links for cross-references
- Include responsible agent for each component

## Communication Preferences

### Agent Chat
- Keep messages concise and focused
- Use structured formats for decisions and actions
- Include timestamps for all entries
- Maintain the Decision Log and Action Items sections

### Decision Making
- Collect input from all relevant agents before making decisions
- Document rationale and implications for all decisions
- Update Memory Bank files to reflect decisions
- Reference decisions in implementation

## Implementation Insights

### Directory Structure
- Maintain hierarchical structure to reflect conceptual model
- Use consistent path references (`.context/shared/memory-bank/core/`)
- Keep agent-specific files in their respective workspace directories
- Use relative paths for cross-references

### File Relationships
- Maintain explicit relationships between Memory Bank files
- Update related files together to ensure consistency
- Use the hierarchy defined in the Memory Bank structure
- Validate cross-references regularly

## Common Pitfalls

### Context Loss
- Failing to update `activeContext.md` when making changes
- Not documenting decisions in the Decision Log
- Missing cross-references between related files
- Incomplete context reset protocol

### Documentation Drift
- Code changes without updating `codeContext.md`
- Architecture changes without updating `systemPatterns.md`
- Progress updates without reflecting in `progress.md`
- Technical changes without updating `techContext.md`

### Communication Gaps
- Not using structured message formats
- Missing tags for relevant agents
- Incomplete decision records
- Not flagging Memory Bank updates

## User Preferences

### Documentation Style
- Prefer concise, structured documentation
- Use hierarchical headings (H1 > H2 > H3)
- Include examples for complex concepts
- Use tables for structured data
- Use Mermaid diagrams for visual representation

### Review Process
- Request reviews from specific agents
- Provide context for the changes
- Highlight significant modifications
- Allow 24 hours for review before finalizing

## Project-Specific Patterns

### Memory Bank Access
- Read `projectbrief.md` and `activeContext.md` at the start of every session
- Check agent-specific rules file for role responsibilities
- Review owned Memory Bank files
- Check recent entries in `agent_chat.md`

### Context Reset Handling
- Follow the 5-phase context reset protocol
- Validate understanding through cross-references
- Confirm readiness before proceeding
- Document any ambiguities or inconsistencies
